const express = require('express');
const axios = require('axios');
const cors = require('cors');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

const cache = new Map();

function normalize(text) {
  return text.trim().toLowerCase();
}

app.post('/ask', async (req, res) => {
  console.log('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', req.body); // –õ–æ–≥ –≤—Å–µ–≥–æ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞

  const { question } = req.body;

  if (!question) {
    console.warn('‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω!');
    return res.status(400).json({ reply: '–í–æ–ø—Ä–æ—Å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω' });
  }

  const key = normalize(question);

  if (cache.has(key)) {
    console.log('üíæ –û—Ç–≤–µ—Ç –∏–∑ –∫–µ—à–∞');
    return res.json({ reply: cache.get(key) });
  }

  try {
    console.log('üîó –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI...');
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: `
          –¢—ã –≤–µ–∂–ª–∏—ã–π –∏ –ø—Ä—è—Ç–Ω—ã–π —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑—É—á–∞—Ç—å **–≥–ª–∞–≥–æ–ª—ã –∏–≤—Ä–∏—Ç–∞**.
          
          üìå –í—Å–µ–≥–¥–∞ —Å–æ–±–ª—é–¥–∞–π —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:
          
          1. –û—Ç–≤–µ—á–∞–π **—Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ –≥–ª–∞–≥–æ–ª–æ–≤**.
          2. –û—Ç–≤–µ—á–∞–π **–Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å**.
          3. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–º–µ—Ç–∫—É:
          
          - –ù–∞–∑–≤–∞–Ω–∏—è –±–∏–Ω—å—è–Ω–æ–≤ –ø–∏—à–∏ —Ç–∞–∫: **[BINYAN]◊§◊ô◊¢◊ú[/BINYAN]**
          - –°–ª–æ–≤–∞ –Ω–∞ –∏–≤—Ä–∏—Ç–µ –æ–±–æ—Ä–∞—á–∏–≤–∞–π –≤: [HE]◊î◊ï◊ú◊ö[/HE]
          - –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é –ø–∏—à–∏ —Ç–∞–∫: [TR]holekh[/TR]
          - –°–ø—Ä—è–∂–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ Markdown:
            \`\`\`markdown
            | –õ–∏—Ü–æ         | –ú.—Ä.       | –ñ.—Ä.       |
            |--------------|------------|------------|
            | –Ø            | [HE]◊î◊ï◊ú◊ö[/HE]     | [HE]◊î◊ï◊ú◊õ◊™[/HE]   |
            \`\`\`
          
          4. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML –∏–ª–∏ <span>
          5. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî —Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≥–ª–∞–≥–æ–ª–∞–º –∏–≤—Ä–∏—Ç–∞
          6. –û—Ç–≤–µ—Ç –Ω–∞—á–∏–Ω–∞–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
          7. –í —Ç–∞–±–ª–∏—Ü—ã —Å–ø—Ä—è–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–π —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ
          8. –í —Ç–∞–±–ª–∏—Ü—ã —Å–ø—Ä—è–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–π –ø–µ—Ä–µ–≤–æ–¥ –≤—ã—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –∏–≤—Ä–∏—Ç–µ –Ω–∞ —è–∑—ã–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          
          üéâ –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:  
          "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –≥–ª–∞–≥–æ–ª–æ–≤ –∏–≤—Ä–∏—Ç–∞. –°–ø—Ä–æ—Å–∏ –º–µ–Ω—è, –∫–∞–∫ —Å–ø—Ä—è–≥–∞—Ç—å –≥–ª–∞–≥–æ–ª ‚Äî —è –ø–æ–∫–∞–∂—É —Ç–∞–±–ª–∏—Ü—É –∏ –æ–±—ä—è—Å–Ω—é."
          `
          },
          { role: 'user', content: question },
        ],
        temperature: 0.7,
      },
      {
        headers: {
          Authorization: `Bearer ${OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
      }
    );

    const reply = response.data.choices?.[0]?.message?.content;

    if (!reply) {
      console.warn('‚ö†Ô∏è OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç!');
      return res.status(500).json({ reply: '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT' });
    }

    cache.set(key, reply);
    console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç OpenAI');
    res.json({ reply });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI:', error.response?.data || error.message);
    res.status(500).json({ reply: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ChatGPT' });
  }
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: http://localhost:${PORT}`);
});
