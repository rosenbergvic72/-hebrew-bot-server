const express = require('express');
const axios = require('axios');
const cors = require('cors');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

const cache = new Map();

function normalize(text) {
  return text.trim().toLowerCase();
}

app.post('/ask', async (req, res) => {
  console.log('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', req.body); // –õ–æ–≥ –≤—Å–µ–≥–æ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞

  const { question } = req.body;

  if (!question) {
    console.warn('‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω!');
    return res.status(400).json({ reply: '–í–æ–ø—Ä–æ—Å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω' });
  }

  const key = normalize(question);

  if (cache.has(key)) {
    console.log('üíæ –û—Ç–≤–µ—Ç –∏–∑ –∫–µ—à–∞');
    return res.json({ reply: cache.get(key) });
  }

  try {
    const model = 'gpt-4o-mini';
    console.log('üîó –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI...');
    console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å:', model);

    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model,
        messages: [
          {
            role: 'system',
            content: `
–¢—ã ‚Äî —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑—É—á–∞—Ç—å –≥–ª–∞–≥–æ–ª—ã –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏–≤—Ä–∏—Ç–∞.

‚úÖ –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ –≥–ª–∞–≥–æ–ª–æ–≤ –∏–≤—Ä–∏—Ç–∞: –≤—Ä–µ–º–µ–Ω–∞, –±–∏–Ω—å—è–Ω—ã, —Å–ø—Ä—è–∂–µ–Ω–∏—è, —Ñ–æ—Ä–º—ã, –ø–µ—Ä–µ–≤–æ–¥, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞.

üö´ –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∏–≤—Ä–∏—Ç—É ‚Äî –æ—Ç–≤–µ—Ç—å –≤–µ–∂–ª–∏–≤–æ, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Ç–æ–ª—å–∫–æ –ø–æ –∏–≤—Ä–∏—Ç—Å–∫–∏–º –≥–ª–∞–≥–æ–ª–∞–º.

‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–º–µ—Ç–∫—É:
- [HE] –∏–≤—Ä–∏—Ç—Å–∫–∏–µ —Å–ª–æ–≤–∞ [/HE]
- [TR] —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ [/TR]
- [BINYAN] –Ω–∞–∑–≤–∞–Ω–∏—è –±–∏–Ω—å—è–Ω–æ–≤ [/BINYAN]
- Markdown: **–∂–∏—Ä–Ω—ã–π** –¥–ª—è –≤–∞–∂–Ω–æ–≥–æ, _–∫—É—Ä—Å–∏–≤_ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤.

‚úÖ –í —Ç–∞–±–ª–∏—Ü–∞—Ö —Å–ø—Ä—è–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–π:
- [HE] —Å–ª–æ–≤–æ –Ω–∞ –∏–≤—Ä–∏—Ç–µ
- [TR] —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é
- –ü–µ—Ä–µ–≤–æ–¥ (–Ω–∞ —è–∑—ã–∫–µ –≤–æ–ø—Ä–æ—Å–∞)

üìå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML –∏–ª–∏ <span> ‚Äî —Ç–æ–ª—å–∫–æ Markdown –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏.
üìå –û—Ç–≤–µ—Ç –Ω–∞—á–∏–Ω–∞–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –µ–≥–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.
            `
          },
          { role: 'user', content: question },
        ],
        temperature: 0.7,
      },
      {
        headers: {
          Authorization: `Bearer ${OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
      }
    );

    const reply = response.data.choices?.[0]?.message?.content;

    if (!reply) {
      console.warn('‚ö†Ô∏è OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç!');
      return res.status(500).json({ reply: '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT' });
    }

    cache.set(key, reply);
    console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç OpenAI');
    res.json({ reply });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI:', error.response?.data || error.message);
    res.status(500).json({ reply: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ChatGPT' });
  }
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: http://localhost:${PORT}`);
});
